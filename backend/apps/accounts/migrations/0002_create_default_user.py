# Generated by Django 5.0.1 on 2025-03-16 18:13

from django.db import migrations
from django.contrib.auth.hashers import make_password
from typing import Any

# pylint: disable=unused-argument
def create_default_admin_user(apps: Any, _schema_editor: Any) -> None:
    """
    Create a default admin user for development purposes.
    
    This ensures there's always at least one user in the system,
    which helps prevent foreign key constraint violations.
    
    Args:
        apps: Registry of available apps and models
        _schema_editor: The schema editor instance (unused)
        
    Returns:
        None
    """
    
    # Get the historical version of the CustomUser model
    CustomUser = apps.get_model('accounts', 'CustomUser')
    
    # Only create the user if no users exist
    if not CustomUser.objects.exists():
        print("Creating default admin user...")
        CustomUser.objects.create(
            username='admin',
            email='admin@billify.local',
            password=make_password('billify_admin'),  # This is securely hashed
            is_staff=True,
            is_superuser=True,
            is_active=True,
            first_name='Default',
            last_name='Admin'
        )
        print("Default admin user created.")

# pylint: disable=unused-argument
def reverse_migration(apps: Any, _schema_editor: Any) -> None:
    """
    Remove the default admin user when rolling back.
    
    Args:
        apps: Registry of available apps and models
        _schema_editor: The schema editor instance (unused)
        
    Returns:
        None
    """
    
    CustomUser = apps.get_model('accounts', 'CustomUser')
    CustomUser.objects.filter(username='admin', email='admin@billify.local').delete()


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_default_admin_user, reverse_migration),
    ]
