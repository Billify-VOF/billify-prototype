name: Deploy to Production

on:
  push:
    branches:
      - staging
      - main
      - testing
      - kunal/cicd
  pull_request:
    branches:
      - staging
      - main
      - testing

env:
  REGISTRY: ghcr.io
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  MINIO_USER: ${{ secrets.MINIO_USER }}
  MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

jobs:
  verify-staging-merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Verify PR source branch
        if: github.event_name == 'pull_request'
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          SOURCE_BRANCH=${{ github.head_ref }}
          
          if [ "$TARGET_BRANCH" == "main" ] && [ "$SOURCE_BRANCH" != "testing" ]; then
            echo "Error: Pull requests to main must come from the testing branch"
            exit 1
          fi
          
          if [ "$TARGET_BRANCH" == "testing" ] && [ "$SOURCE_BRANCH" != "staging" ]; then
            echo "Error: Pull requests to testing must come from the staging branch"
            exit 1
          fi
          
          echo "Pull request source branch is valid"
  build-images:
    needs: verify-staging-merge
    if: (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && needs.verify-staging-merge.result == 'success' && (startsWith(github.ref, 'refs/heads/kunal/cicd')||startsWith(github.ref, 'refs/heads/staging') || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/testing'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Nginx
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build nginx -f nginx/Dockerfile \
            -t ${{ env.REGISTRY }}/${REPO_NAME}/nginx:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${REPO_NAME}/nginx:${{ github.sha }}

      - name: Build and push Backend
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build backend -f backend/Dockerfile-prod \
            -t ${{ env.REGISTRY }}/${REPO_NAME}/backend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${REPO_NAME}/backend:${{ github.sha }}

      - name: Build and push Frontend
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build frontend -f frontend/Dockerfile-prod \
            -t ${{ env.REGISTRY }}/${REPO_NAME}/frontend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${REPO_NAME}/frontend:${{ github.sha }}
  

  deploy:
    needs: [build-images]
    if: (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && needs.build-images.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env in the local
        run: |
          cd infrastructure
          cat <<EOF > .env
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_DB=${POSTGRES_DB}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          MINIO_USER=${MINIO_USER}
          MINIO_PASSWORD=${MINIO_PASSWORD}
          DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
          EOF
          cd ..

      - name: Sync files to server
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "infrastructure/docker-compose.prod.yml,infrastructure/.env"
          target: "/home/billify/app/"

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1   
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            set -x
            cd /home/billify/app/infrastructure
            sudo apt-get update --fix-missing && sudo apt-get install -f -y
            sudo apt-get remove -y containerd.io || true
            sudo apt-get install -y docker.io docker-compose || { echo "Failed to install dependencies"; exit 1; }
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.repository_owner }} --password-stdin || { echo "Failed to login to GHCR"; exit 1; }
            docker volume inspect minio_data >/dev/null 2>&1 || docker volume create --name=minio_data || { echo "Failed to create minio_data volume"; exit 1; }
            export REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            export FRONTEND_IMAGE=${{ env.REGISTRY }}/${REPO_NAME}/frontend:${{ github.sha }}
            export BACKEND_IMAGE=${{ env.REGISTRY }}/${REPO_NAME}/backend:${{ github.sha }}
            export NGINX_IMAGE=${{ env.REGISTRY }}/${REPO_NAME}/nginx:${{ github.sha }}
            docker compose --env-file .env -f docker-compose.prod.yml config > previous_config.yaml || { echo "Failed to preserve previous state"; exit 1; }
            docker compose --env-file .env -f docker-compose.prod.yml pull || { echo "Failed to pull images"; exit 1; }
            docker compose --env-file .env -f docker-compose.prod.yml up -d --force-recreate || { echo "Failed to deploy services"; exit 1; }
            attempts=12
            interval=10
            for ((i=1; i<=attempts; i++)); do
                if curl -f http://app.billify.be; then
                    echo "Smoke test passed"
                    exit 0
                fi
                echo "Attempt $i/$attempts failed, retrying in $interval seconds..."
                sleep $interval
            done
            echo "Smoke test failed after $attempts attempts"
            exit 1

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd /home/billify/app/infrastructure/
            echo "Rolling back to previous configuration..."
            mv -f previous_config.yaml docker-compose.prod.yml
            docker compose -f docker-compose.prod.yml up -d --force-recreate